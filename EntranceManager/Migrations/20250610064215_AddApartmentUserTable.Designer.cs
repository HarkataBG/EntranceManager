// <auto-generated />
using System;
using EntranceManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntranceManager.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250610064215_AddApartmentUserTable")]
    partial class AddApartmentUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entrance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntranceSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("Entrances");
                });

            modelBuilder.Entity("EntranceManager.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntranceId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLivingPeople")
                        .HasColumnType("int");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntranceId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("EntranceManager.Models.ApartmentFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("FeeId");

                    b.ToTable("ApartmentFees");
                });

            modelBuilder.Entity("EntranceManager.Models.ApartmentUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentUsers");
                });

            modelBuilder.Entity("EntranceManager.Models.EntranceUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EntranceId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EntranceId");

                    b.HasIndex("EntranceId");

                    b.ToTable("EntranceUsers");
                });

            modelBuilder.Entity("EntranceManager.Models.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntranceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntranceId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("EntranceManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entrance", b =>
                {
                    b.HasOne("EntranceManager.Models.User", "ManagerUser")
                        .WithMany("ManagedEntrances")
                        .HasForeignKey("ManagerUserId");

                    b.Navigation("ManagerUser");
                });

            modelBuilder.Entity("EntranceManager.Models.Apartment", b =>
                {
                    b.HasOne("Entrance", "Entrance")
                        .WithMany("Apartments")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntranceManager.Models.User", "OwnerUser")
                        .WithMany("OwnedApartments")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entrance");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("EntranceManager.Models.ApartmentFee", b =>
                {
                    b.HasOne("EntranceManager.Models.Apartment", "Apartment")
                        .WithMany("ApartmentFees")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EntranceManager.Models.Fee", "Fee")
                        .WithMany("ApartmentFees")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("EntranceManager.Models.ApartmentUser", b =>
                {
                    b.HasOne("EntranceManager.Models.Apartment", "Apartment")
                        .WithMany("ApartmentUsers")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntranceManager.Models.User", "User")
                        .WithMany("ApartmentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntranceManager.Models.EntranceUser", b =>
                {
                    b.HasOne("Entrance", "Entrance")
                        .WithMany("EntranceUsers")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntranceManager.Models.User", "User")
                        .WithMany("EntranceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntranceManager.Models.Fee", b =>
                {
                    b.HasOne("Entrance", "Entrance")
                        .WithMany()
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrance");
                });

            modelBuilder.Entity("Entrance", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("EntranceUsers");
                });

            modelBuilder.Entity("EntranceManager.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentFees");

                    b.Navigation("ApartmentUsers");
                });

            modelBuilder.Entity("EntranceManager.Models.Fee", b =>
                {
                    b.Navigation("ApartmentFees");
                });

            modelBuilder.Entity("EntranceManager.Models.User", b =>
                {
                    b.Navigation("ApartmentUsers");

                    b.Navigation("EntranceUsers");

                    b.Navigation("ManagedEntrances");

                    b.Navigation("OwnedApartments");
                });
#pragma warning restore 612, 618
        }
    }
}
